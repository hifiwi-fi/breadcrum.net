#!/usr/bin/env bash

set -e

# Get the current branch name
TARGET_BRANCH=$(git branch --show-current)
BRANCH_NAME="regenerate-lockfile-${GITHUB_RUN_NUMBER:-$(date +%s)}"

echo "🎯 Target branch: $TARGET_BRANCH"

# Configure git
git config user.name "github-actions[bot]"
git config user.email "github-actions[bot]@users.noreply.github.com"

# Capture outdated packages before regenerating
echo "📊 Checking for outdated packages..."
OUTDATED_BEFORE=$(npm outdated --depth=9999 || true)

# Delete existing package-lock.json
echo "🗑️  Deleting existing package-lock.json..."
rm -f package-lock.json

# Run npm install to generate new lockfile
echo "📦 Running npm install..."
npm install

# Capture outdated packages after regenerating
OUTDATED_AFTER=$(npm outdated --depth=9999 || true)

# Check if there are changes
if git diff --exit-code package-lock.json > /dev/null 2>&1; then
  echo "✅ No changes detected in package-lock.json"
  exit 0
fi

echo "📝 Changes detected in package-lock.json"

# Create a new branch
echo "🌿 Creating branch: $BRANCH_NAME"
git checkout -b "$BRANCH_NAME"

# Stage changes
git add package-lock.json

# Get the diff stats
DIFF_STAT=$(git diff --staged --stat package-lock.json)

# Build commit message with formatted diff
COMMIT_MESSAGE="chore: regenerate package-lock.json

\`\`\`diff
${DIFF_STAT}
\`\`\`"

if [ -n "$OUTDATED_BEFORE" ]; then
  COMMIT_MESSAGE="${COMMIT_MESSAGE}

Outdated packages before regeneration:
${OUTDATED_BEFORE}"
fi

# Commit changes
echo "💾 Committing changes..."
git commit -m "$COMMIT_MESSAGE"

# Push the branch
echo "⬆️  Pushing branch to origin..."
git push origin "$BRANCH_NAME"

# Build PR body with outdated package information
PR_BODY="## 🔄 Regenerate package-lock.json

This PR was automatically generated by the regenerate-lockfile workflow.

The \`package-lock.json\` file has been regenerated by deleting the existing lockfile and running \`npm install\`.

### 📊 Changes

\`\`\`diff
${DIFF_STAT}
\`\`\`"

if [ -n "$OUTDATED_BEFORE" ]; then
  PR_BODY="${PR_BODY}

### 📦 Outdated Packages (Before Regeneration)

\`\`\`
${OUTDATED_BEFORE}
\`\`\`"
fi

if [ -n "$OUTDATED_AFTER" ] && [ "$OUTDATED_AFTER" != "$OUTDATED_BEFORE" ]; then
  PR_BODY="${PR_BODY}

### 📦 Outdated Packages (After Regeneration)

\`\`\`
${OUTDATED_AFTER}
\`\`\`"
fi

PR_BODY="${PR_BODY}

---

**Triggered by:** @${GITHUB_ACTOR:-unknown}
**Run number:** ${GITHUB_RUN_NUMBER:-N/A}
**Base branch:** ${TARGET_BRANCH}"

# Create PR using GitHub CLI
echo "🔀 Creating pull request..."
gh pr create \
  --base "$TARGET_BRANCH" \
  --head "$BRANCH_NAME" \
  --title "chore: regenerate package-lock.json" \
  --body "$PR_BODY"

echo "✅ Pull request created successfully"
